name: release

on:
  workflow_dispatch:
  release:
    types:
      - published

permissions:
  id-token: write
  contents: write

jobs:
  get:
    name: Get Release
    runs-on: ubuntu-latest
    environment:
      name: production

#    outputs:
#      TAG_STATUS: ${{ steps.tag-commit.outputs.TAG_STATUS }}
#      SEM_NEXT_VERSION: ${{ steps.tag-commit.outputs.SEM_NEXT_VERSION }}
#      SEM_LAST_VERSION: ${{ steps.tag-commit.outputs.SEM_LAST_VERSION }}

    steps:
      - name: Get release tag
        id: get-tag
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get published release
        id: existing-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.get-tag.outputs.RELEASE_TAG }}'
            })
            
            console.log(release.html_url)
            
            core.setOutput('PUBLISHED_RELEASE_ID', release.id)

      - name: Delete latest release (published)
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.existing-release.outputs.PUBLISHED_RELEASE_ID }}
            })

      - name: Get and update previous (now latest) release
        id: get-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            })
            
            const [release] = releases
            .filter(r => !r.prerelease && !r.draft)
            .sort((a, b) => new Date(b.published_at).getTime() - new Date(a.published_at).getTime())

            console.log(release.html_url)
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              make_latest: true,
            })
            
            core.setOutput('RELEASE_ID', release.id)
            core.setOutput('RELEASE_TAG', release.tag_name)

      - name: Get result
        run: |
          echo "${{steps.get-release.outputs.RELEASE_ID}}"
          echo "${{steps.get-release.outputs.RELEASE_TAG}}"
