name: Cache between jobs

on:
  push:
#    branches:
#      - unused

permissions:
  id-token: write
  contents: read

jobs:
  sample:
    outputs:
      claim-handler: ${{ steps.report.outputs.claim-handler }}
      common: ${{ steps.report.outputs.common }}
      coordinator: ${{ steps.report.outputs.coordinator }}
      customer: ${{ steps.report.outputs.customer }}
      procurement: ${{ steps.report.outputs.procurement }}
      surveyor: ${{ steps.report.outputs.surveyor }}
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - claim-handler
          - common
          - coordinator
          - customer
          - procurement
          - surveyor
    runs-on: ubuntu-latest
    environment: azure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install
        if: matrix.test-suite == 'claim-handler'
        run: exit 1

      - name: Install
        if: matrix.test-suite != 'claim-handler'
        run: echo "Hello"

      - name: Generate report for suites
        id: report
        uses: actions/github-script@v7
        with:
          script: |
            const { getSuitesReport } = await import('${{ github.workspace }}/report.mjs')
            const report = getSuitesReport();
            
            core.setOutput('${{ matrix.test-suite }}', JSON.stringify(report));

  second:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - sample
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: echo '${{ toJSON(needs.sample.outputs) }}'

      - name: Generate report for suites
        id: report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { generateSummary, generateSlackMessage } = await import('${{ github.workspace }}/report.mjs')
            const result = ${{ toJSON(needs.sample.outputs) }};
  
            const suites = Object
              .values(result)
              .flatMap(result => {
                try {
                  return JSON.parse(result);
                } catch (error) {
                  return [];
                }
              });

            const total = suites.reduce(
              (acc, suite) => ({ passed: acc.passed + suite.passed, failed: acc.failed + suite.failed }),
              { passed: 0, failed: 0 },
            );
            
            console.log(suites, total) 
